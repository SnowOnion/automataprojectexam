#summary 第一组第1题自动机建模-马晟，王玥，郭鑫

= 项目概览 =
== 需求 ==
 # 用java编写，保证可扩展性
 # 有完整的友好的图形界面，支持鼠标操作，鼠标支持经过自动机元素时高亮，便捷的选择操作。有针对“状态”和“变迁”的属性修改页面。
 # 将自动机保存至XML，并且对应好对应的DTD。
 # 能够读取定义好的XML文件。
 # 定义好自动机的数据结构，并能够从某个接口将自动机结构从XML中读出。
 # 支持定义一些自动机的属性，比如是DNF还是CNF还是PDA。
 # （Optional）支持对自动机进行自动的布局。

== 项目介绍 ==
  本项目完成自动机建模工具，是自动机课程的项目。
整体项目开发分为四个主要部分：
 # 项目基础数据机构设计
 # XML的存储和读取
 # 适宜的图形用户界面
 # 优化项目

== 项目进度（实时更新） ==
 # 完成基本数据结构类（automaton包）
 # 完成XML的存储和读写（xml包）-->完成了自动机存储结构的定义

== 小组成员 ==
||姓名||学号||邮箱||
||马晟||2009212623||williamma.wm@gmail.com||
||王玥||2009 ||pipituliuliu@gmail.com||
||郭鑫||2009 ||gheart123@gmail.com||


= 项目设计及开发 =
== 开发环境 ==

 # Eclipse 3.2+
 # SVN Google Code Team Work
 # Java （JDK 1.6）基本Swing编程
 # (Optional) Flex，Eclipse RCP 平台框架的使用（后期可能会使用，在基础类实现了以后）

== 类图 ==
=== automaton ===
这里是基础数据结构的相关类，这些类在包automaton中 <br>
[http://automataprojectexam.googlecode.com/files/basicClassDiagram1209.JPG]


=== xml ===
这里是XML的存储和读取的相关类的类图，这些类在包xml中。 <br>
[http://automataprojectexam.googlecode.com/files/xmlClassDiagram1209.JPG]

== DTD 定义和XML文件==
XML的样例文件放在xml包中，在xmldata中是一些测试用的XML文件，可以参考TemplateXML来进行创建自己的自动机类，然后可以通过调用AutomatonFactory构造得到一个Automaton。不要写错XML，项目目前的挑错能力很差，如果有不匹配的标签很容易出错。

=== DFA ===
<?xml version="1.0" encoding="UTF-8"?><br>
<!DOCTYPE DFA[<br>
	<!ELEMENT DFA(AutomatonName,AutomatonStates,AutomatonInputSymbols,DFATransitions)><br>
	<!ELEMENT AutomatonName(#PCDATA)> <br>
	<!ELEMENT AutomatonStates(State+)><br>
	<!ELEMENT State(StateId,StateType)><br>
	<!ELEMENT StateId(#PCDATA)><br>
	<!ELEMENT StateType(#PCDATA)><br>
	<!ELEMENT AutomatonInputSymbols(InputSymbol{{{*}}})><br>
	<!ELEMENT InputSymbol(#PCDATA)><br>
	<!ELEMENT DFATransitions(DFATransition{{{*}}})><br>
	<!ELEMENT DFATransition(FromState,DFAConditions,ToState)><br>
	<!ELEMENT FromState(State)><br>
	<!ELEMENT DFAConditions(DFACondition+)><br>
	<!ELEMENT ToState(State)><br>
]>
=== NFA ===
<?xml version="1.0" encoding="UTF-8"?> <br>
<!DOCTYPE NFA[ <br>
	<!ELEMENT NFA(AutomatonName,AutomatonStates,AutomatonInputSymbols,NFATransitions)> <br>
	<!ELEMENT AutomatonName(#PCDATA)> <br>
	<!ELEMENT AutomatonStates(State+)> <br>
		<!ELEMENT State(StateId,StateType)> <br>
		<!ELEMENT StateId(#PCDATA)> <br>
		<!ELEMENT StateType(#PCDATA)> <br>
	<!ELEMENT AutomatonInputSymbols(InputSymbol{{{*}}})> <br>
	<!ELEMENT InputSymbol(#PCDATA)> <br>
	<!ELEMENT NFATransitions(NFATransitions{{{*}}})> <br>
	<!ELEMENT NFATransition(FromState,NFAConditions,ToState)> <br>
	<!ELEMENT FromState(State)> <br>
	<!ELEMENT NFAConditions(NFACondition+)> <br>
	<!ELEMENT ToState(State)> <br>
]>
=== PDA ===
<?xml version="1.0" encoding="UTF-8"?><br>
<!DOCTYPE PDA[<br>
	<!ELEMENT PDA(AutomatonName, AutomatonStates, AutomatonInputSymbols, PDAStackSymbols, PDAInitialStackSymbol, PDATransitions)><br>
	<!ELEMENT AutomatonName(#PCDATA)><br>
	<!ELEMENT AutomatonStates(State+)><br>
		<!ELEMENT State(StateId,StateType)><br>
		<!ELEMENT StateId(#PCDATA)><br>
		<!ELEMENT StateType(#PCDATA)><br>
	<!ELEMENT AutomatonInputSymbols(InputSymbol+)><br>
	<!ELEMENT PDAStackSymbols(PDAStackSymbol+)><br>
	<!ELEMENT InputSymbol(#PCDATA)><br>
	<!ELEMENT PDAStackSymbol(#PCDATA)><br>
	<!ELEMENT PDAInitialStackSymbol(#PCDATA)><br>
	<!ELEMENT PDATransitions(PDATransition)><br>
	<!ELEMENT PDATransition(FromState,PDAConditions,ToState)><br>
	<!ELEMENT FromState(State)><br>
	<!ELEMENT PDAConditions(PDACondition)><br>
		<!ELEMENT PDACondition(PDAConditionSymbol, PDAFromStackSymbol, PDAToStackSymbol)><br>
		<!ELEMENT PDAConditionSymbol(InputSymbol)><br>
		<!ELEMENT PDAFromStackSymbol(PDAStackSymbol)><br>
		<!ELEMENT PDAToStackSymbol(PDAStackSymbol+)><br>
	<!ELEMENT ToState(State)><br>
]>
= 特殊说明 =



= 其他 =
[http://code.google.com/p/automatonmodeling/wiki/ProjectDesign 更多内容请点击链接]
[http://code.google.com/p/automatonmodeling 项目主页]